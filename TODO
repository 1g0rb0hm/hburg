Design Issues
----------------------------------------------------
 * Create SourceCode class and make every JConstructor,
	JMethod, JVariable etc. an instance of it. That way there
	is a unified way to add comments to any piece of emitted
	source code.

	class SourceCode a where
		sourceAddComment :: (Show b) => a -> b -> a

Lexer
----------------------------------------------------

 * Handle escaped \:\) in semantic actions
 * replace '(:' with '.)' in order to be comply with Coco\R

CSA
----------------------------------------------------

 * implement type checking of production patterns (see @TODO note in Csa.hs)
 * in Java we can only have one out Attribute, so be sure
   to check this when parsing!

TILING
----------------------------------------------------

 * Throw assertion error in tile() instead of: 
	'System.err.println("ERROR: Encountered undefined node: " + n.kind() );'

Grammar
----------------------------------------------------

 * How should we indicate start productions? There
   are several possibilities:

	- Do it as in Coco/R where the ident used after
	  the "COMPILER" keyword is re-used in the productions
	  to indicate the start symbol

	- Do it as CUP Parser Generator for Java http://www.cs.princeton.edu/~appel/modern/java/CUP/
	  does it:
	  'start with program;'
 
	-> Status Quo: the first production is used as the start symbol.
